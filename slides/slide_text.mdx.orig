import { themes } from "mdx-deck";
import { CodeSurfer, CodeSurferColumns, Step } from "code-surfer";
import { github } from "@code-surfer/themes";
import { default as style } from "./resources/theme";
import { default as SlideFooter } from "./resources/custom_layout";

import "prismjs/components/prism-rust";
import "prismjs/components/prism-toml";

export const theme = style;

import poster from "./resources/images/poster.png";

<img
  src={poster}
  style={{
    width: "100%",
    height: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

---

<CodeSurfer theme={github}>


```cpp title="C++ Memory safety example"
#include<iostream>
#include<vector>
#include<string>

int main(int argc, char *argv[])
{
	std::vector<std::string> strings;

	strings.push_back("Hello");
	strings.push_back("World");

	std::string& ref = strings[0];

	add_more_strings(&strings);

	std::cout << ref << std::endl;
	return 0;
}

```

```cpp 12,14 title="C++ Memory safety example"
#include<iostream>
#include<vector>
#include<string>

int main(int argc, char *argv[])
{
	std::vector<std::string> strings;

	strings.push_back("Hello");
	strings.push_back("World");

	std::string& ref = strings[0];

	add_more_strings(&strings);

	std::cout << ref << std::endl;
	return 0;
}

```

</CodeSurfer>


---

<SplitRight>


import cwe from "./resources/images/weaknesses.png";

<img
  src={cwe}
  style={{
    width: "80%",
    height: "80%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

# Why memory safety?

<ul>
  <li>
    Mitre: <strong>Top 25 issues</strong>
    <br /> https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html
  </li>
  <Steps>
    <li>
      Microsoft: <strong>70% preventable</strong>
      <br /> https://msrc-blog.microsoft.com/2019/11/07/using-rust-in-windows/
    </li>
    <li>
      Chromium : <strong>70% preventable</strong>
      <br /> https://www.chromium. org/Home/chromium-security/memory-safety
    </li>
  </Steps>
</ul>

</SplitRight>


---

# Origin of rust

import originofrust from "./resources/images/originofrust.png";

<img
  src={originofrust}
  style={{
    width: "60%",
    height: "60%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

<ul>
  <li> 2006 Graydon Hoare starts Rust </li>
  <Steps>
    <li> 2010 Mozilla announces Rust </li>
    <li> 2015 Rust 1.0 </li>
    <li> 2020 148 companies use Rust in production</li>
  </Steps>
</ul>

---

# Ownership

import ownership1 from "./resources/images/ownership1.png";

<img
  src={ownership1}
  style={{
    width: "60%",
    height: "60%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

A string type S1 in C++

---

# Ownership

import ownership2 from "./resources/images/ownership2.png";

<img
  src={ownership2}
  style={{
    width: "60%",
    height: "60%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

String S1 shallow copy

---

# Ownership

import ownership3 from "./resources/images/ownership3.png";

<img
  src={ownership3}
  style={{
    width: "60%",
    height: "60%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

String S2 owns the value, S1 is invalid

---

# Borrowing

import borrowing from "./resources/images/borrowing.png";

<img
  src={borrowing}
  style={{
    width: "60%",
    height: "60%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

Reference S2 borrows from S1

<ul>
  <Steps>
    <li> Multiple immutable references allowed</li>
    <li> Single mutable reference allowed</li>
  </Steps>
</ul>

---

# Enums

An enum in Rust is a type that represents data that is one of several possible variants.<br/> Each variant in the enum can optionally have data associated with it

---

<CodeSurfer theme={github} title="Enums">


```rust title="Enums" subtitle="Basic decl."

enum IPType {
  ipv4,
  ipv6
}

```

```rust title="Enums" subtitle="Basic decl"

enum IPType {
  ipv4,
  ipv6
}

let a_var = IPType::ipv4;
let b_var = IPType::ipv6;


```

```rust title="Enums" subtitle="More Useful"

// Create an enum for Ip Addr Types

enum IPType {
  ipv4,
  ipv6
}


struct IP
{
  type: IPType,
  address: String,
}

```

```rust title="Enums" subtitle="More Useful"

// Create an enum for Ip Addr Types

enum IPType {
  ipv4,
  ipv6
}


struct IP
{
  type: IPType,
  address: String,
}

let localhost = Ip {
  type: IPType::V4,
  address: String::from("127.0.0.1"),
};

```

</CodeSurfer>


---

<CodeSurfer theme={github} >


```rust title="Enums" subtitle="Enums superpowered"

enum IPType {
  ipv4,
  ipv6
}


struct IP
{
  type: IPType,
  address: String,
}

```

```rust title="Enums" subtitle="Enums superpowered"

enum IP {
  ipv4(String),
  ipv6(String),
}

```

```rust title="Enums" subtitle="Enums superpowered"

enum IP {
  ipv4(String),
  ipv6(String),
  none,
}

```

```rust title="Enums" subtitle="Enums superpowered"

enum IP {
  ipv4(String),
  ipv6(String),
  none,
}

let localhost = IP::ipv4(String::from("127.0.0.1"));

```

```rust title="Enums" subtitle="Can even have their own functions"

enum IP {
  ipv4(String),
  ipv6(String),
  none,
}

let localhost = IP::ipv4(String::from("127.0.0.1"));

impl Ip{
  fn is_valid (&self) -> bool {
    // Ensure validtiy here
  }
}

```

</CodeSurfer>


---

<CodeSurfer theme={github}>


```rust title="Enums" subtitle="Pattern Matching (superpowered)"

enum IP {
  ipv4(String),
  ipv6(String),
  none,
}

let localhost = IP::ipv4(String::from("127.0.0.1"));

match localhost {
  IP::ipv4(addr) => {
    // Actions for ipv4
  },
  IP::ipv6(addr) => {
    // Actions for ipv6
  },
  IP::none => {
    // Actions for none
  }
}

```

```rust title="Enums" subtitle="Pattern Matching (superpowered)"

let localhost = IP::ipv4(String::from("127.0.0.1"));

match localhost {
  IP::v4(ref value)  if value == "127.0.0.1" => {
    println!("Nothing like home eh !");
  },
  IP::v4(ref value)  if value != "127.0.0.1" => {
    println!("Your ipv4 addr is {}", value);
  },
  IP::v6 (addr)  => {
    println!("Your ipv6 addr is {}", addr);
  },
  IP::none => { },
  IP::ipv6(addr) => { },
}

```

```rust title="Enums" subtitle="Pattern Matching (superpowered)"

let localhost = IP::ipv4(String::from("127.0.0.1"));

match localhost {
  IP::v4(ref value)  if value == "127.0.0.1" => {
    println!("Nothing like home eh !");
  },
  IP::v4(ref value)  if value != "127.0.0.1" => {
    println!("Your ipv4 addr is {}", value);
  },
  IP::v6 (addr)  => {
    println!("Your ipv6 addr is {}", addr);
  },
  IP::none => { },
  IP::ipv6(_) => { },
}

```

```rust title="Enums" subtitle="Pattern Matching (superpowered)"

let localhost = IP::ipv4(String::from("127.0.0.1"));

match localhost {
  IP::v4(ref value)  if value == "127.0.0.1" => {
    println!("Nothing like home eh !");
  },
  IP::v4(ref value)  if value != "127.0.0.1" => {
    println!("Your ipv4 addr is {}", value);
  },
  IP::v6 (addr)  => {
    println!("Your ipv6 addr is {}", addr);
  },
  _ => { },
}

```

</CodeSurfer>


---

# Error handling

import dontpanic from "./resources/images/dontpanic.jpeg";

<img
  src={dontpanic}
  style={{
    width: "50%",
    height: "50%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

---

<CodeSurfer theme={github}>


```rust title="Result and Option type"
enum Result<T,E> {
	Ok(T),
	Err(E),
}

enum Option<T> {
	Some(T),
	None
}
```

</CodeSurfer>


---

<CodeSurfer theme={github}>


```rust title="Traits"
trait Sound {
	fn make_noise(&Self)-> String;
}

struct Dog { name: String };

impl Sound for Dog {
	fn make_noise(&Self) -> String {
		return String::from("Woof!");
	}
}
```

</CodeSurfer>


---

<CodeSurfer theme={github}>


```rust title="Generic functions" subtitle="Bound to Ord"
fn min<T: Ord>(value1: T, value2: T) -> T {
	if value1 <= value2 {
		value1
	} else {
		value2
	}
}
```

</CodeSurfer>


---

# Concurrency

<ul>
  <Steps>
    <li> fork/join </li>
    <li> channels </li>
    <li> arcs/mutex </li>
    <li> condition variables </li>
  </Steps>
</ul>

---

# Channels

import channels from "./resources/images/channels.png";

<img
  src={channels}
  style={{
    width: "50%",
    height: "50%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

---

# Arcs

import arc from "./resources/images/atom.jpeg";

<img
  src={arc}
  style={{
    width: "20%",
    height: "20%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

<CodeSurfer theme={github}>


```rust subtitle="Atomic Reference Count"
Arc<T>
```

</CodeSurfer>


---

# Mutex

import lock from "./resources/images/lock.jpeg";

<img
  src={lock}
  style={{
    width: "20%",
    height: "20%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

<CodeSurfer theme={github}>


```rust subtitle="Mutex"
Mutex<T>
```

</CodeSurfer>

<<<<<<< HEAD

---

# Macros!

---

# Macros!

- Rust have many different constructs to let you reuse code
- You have generics, incredible typesystem and traits
- But sometimes you have just one great idea that it is not possible to implement with those constraints
- Enter macros
- Macros are way more powerful than your C++ macro's
- They can tap into ast parsing of the language
- You should use them only if there is no other way

---

<CodeSurfer theme={github}>


```rust title="Macros!" subtitle="See them from the eyes of the user"

let x: Vec<u32> = vec![1, 2, 3];

```

```rust 3:10 title="Macros!" subtitle="See them from the eyes of the user"

let x: Vec<u32> = vec![1, 2, 3];

let x: Vec<u32> = {
  let mut temp_vec = Vec::new();
  temp_vec.push(1);
  temp_vec.push(2);
  temp_vec.push(3);
  temp_vec
};

```

```rust 3:10 title="Macros!" subtitle="See them from the eyes of the user"

let x: Vec<u32> = vec![1, 2, 3];

let x: Vec<u32> = {
  let mut temp_vec = Vec::new();
  temp_vec.push(1);
  temp_vec.push(2);
  temp_vec.push(3);
  temp_vec
};

```

</CodeSurfer>


---

<CodeSurferColumns theme={github}>


<Step title="Macros!" subtitle="Expand the expansion">


```rust
let x: Vec<u32> = {
  let mut temp_vec = Vec::new();
  temp_vec.push(1);
  temp_vec.push(2);
  temp_vec.push(3);
  temp_vec
};
```

```rust
macro_rules! vec {
( $( $x:expr ),* ) => {
    {
        let mut temp_vec = Vec::new();
        $(
            temp_vec.push($x);
        )*
        temp_vec
    }
};
}

```

</Step>


<Step title="Macros!" subtitle="Expand the expansion">


```rust
let x: Vec<u32> = {
  let mut temp_vec = Vec::new();
  temp_vec.push(1);
  temp_vec.push(2);
  temp_vec.push(3);
  temp_vec
};
```

```rust 1
macro_rules! vec { // fn vec! ( input )
( $( $x:expr ),* ) => {
    {
        let mut temp_vec = Vec::new();
        $(
            temp_vec.push($x);
        )*
        temp_vec
    }
};
}
```

</Step>


<Step title="Macros!" subtitle="Expand the expansion">


```rust
let x: Vec<u32> = {
  let mut temp_vec = Vec::new();
  temp_vec.push(1);
  temp_vec.push(2);
  temp_vec.push(3);
  temp_vec
};
```

```rust 2
macro_rules! vec {
( $( $x:expr ),* ) => { // catch ast inside the input
    {
        let mut temp_vec = Vec::new();
        $(
            temp_vec.push($x);
        )*
        temp_vec
    }
};
}
```

</Step>


<Step title="Macros!" subtitle="Expand the expansion">


```rust
let x: Vec<u32> = {
  let mut temp_vec = Vec::new();
  temp_vec.push(1);
  temp_vec.push(2);
  temp_vec.push(3);
  temp_vec
};
```

```rust 2,5:7
macro_rules! vec {
( $( $x:expr ),* ) => {
    {
        let mut temp_vec = Vec::new();
        $(
            temp_vec.push($x);
        )*
        temp_vec
    }
};
}
```

</Step>


<Step title="Macros!" subtitle="Expand the expansion">


```rust
let x: Vec<u32> = {
  let mut temp_vec = Vec::new();
  temp_vec.push(1);
  temp_vec.push(2);
  temp_vec.push(3);
  temp_vec
};
```

```rust 4,8
macro_rules! vec {
( $( $x:expr ),* ) => {
    {
        let mut temp_vec = Vec::new();
        $(
            temp_vec.push($x);
        )*
        temp_vec
    }
};
}
```

</Step>


</CodeSurferColumns>

=======
>>>>>>> 92bbf8deb198d31b126e7337f1c576fba8b47d4c

---

# Upcoming

<ul>
  <Steps>
    <li> Unsafe</li>
    <li> Macros </li>
    <li> Modules </li>
    <li> Std::lib </li>
    <li> Cargo </li>
    <li> Integrated tests & benchmark </li>
    <li> Releases & development </li>
  </Steps>
</ul>

---

# But no !

<Steps>
  <li> We decided that even those things are interesting to us</li>
  <li> This is only an introduction </li>
  <li> And we want you to get the feeling for this language </li>
  <li>
    So we're going to (try) a live coding session for the rest of the talk
  </li>
  <li>
    We are going to create a multithreaded application with rust in less than 70
    lines of code
  </li>
  <li> From nothing !! </li>
  <li> Even we've would like to say this was the plan all along... </li>
  <li>
    It wasn't so all the topics that I showed already exists and we will share
    them with you later
  </li>
</Steps>

---

# What are we building

import demo from "./resources/images/livedemo.png";

<img
  src={demo}
  style={{
    width: "100%",
    height: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>

---

# What are we building

import demo_marked from "./resources/images/livedemomarked.png";

<img
  src={demo_marked}
  style={{
    width: "100%",
    height: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
  }}
/>
---

# Let's start


---

# The End
