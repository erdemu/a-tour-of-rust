1 Example C++ memory safety example (CWE top 25)
2 Origin of Rust (mozilla 2015, servo & multithreaded firefox)
3 Linear typesystem, ownership, borrowing (scope, lifetime)
4 Enums
5 Error handling (return types vs. C++ exception)
6 Polymorphism (Generics, traits and trait objects)
7 Concurrency (send&sync, Arcs, mutex)
8 Macros
9  Unsafe
10 Modules
11 Cargo
12 Std::lib
13 Integrated test & benchmark
14 Releases (editions)

We explain syntax at each example

0. Introduction
------------------

... intro Erdem ...

My name is Micha Hergarden and I am part of the SICS team at EUV source. I have a background in Software Engineering with about 20 years of experience. I came into contact with Rust at the 2015 Fosdem software conference and got to use it for my thesis in 2018.

Our aim for tonight is to give you a short tour of the Rust programming language and to show in what aspects it differs from its cousins c and c++.

1. Example C++ memory safety
------------------

#include<iostream>
#include<vector>
#include<string>

int main(int argc, char *argv[])
{
        std::vector<std::string> strings;

        strings.push_back("Hello");
        strings.push_back("World");

        std::string& ref = strings[0];

	add_more_strings(&strings);

        std::cout << ref << std::endl;
        return 0;
}

Will this work? The answer is: maybe. In some cases the vector will allocate new memory to enlarge and move its elements to this newly allocated block. The problem is that the reference 'ref' is then pointing into unused memory. This opens the door for segmentation faults or information leaking.

The CWE website tracks common weaknesses in software development (https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html). The top 25 shows numerous issues that may arise in software where memory management is not done properly. An internal investigation at Microsoft also showed that about 70% of the security bugs found in their products are related to memory management (https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html). The Chromium project reports the same figures for their Chrome derived browser ( https://www.chromium.org/Home/chromium-security/memory-safety).

This seems to suggest that even with good engineers working on the code, it is still difficult to prevent these types of errors from occuring. A common denominator for these issues is the use of languages like C or C++. These languages offer runtime efficiency and low level control, but have the trade off of requiring rigorous testing and code checking to make sure no unintended issues are introduced. In contrast, languages with a garbage collector offer better protection from some of these types of issues but have the trade off of lacking the low level control needed in certain application domains, i.e. realtime systems. Enter Rust...

2. Origin of Rust
------------------

In 2006 a Mozilla Research employee named Graydon Hoare started the Rust language project as a means to design a language that provides better memory safety guarantees while still offering the low level control that c and c++ offer. Mozilla started sponsoring the project in 2009 and announced it in 2010. The first major release of the language was in 2015. Initially the language was used for the Servo browser project. Servo was developed in cooperation with Samsung as a means to explore the concurrency and memory safety properties of Rust in order to create a parallelized web browser. The CSS style engine has already found its way into the Firefox browser.

Rust gained popularity outside of Mozilla and has earned the honour of being the "most loved programming language" on the Stack Overflow developer survey since 2016. The industry also started adopting the language and according to the project page around 148 companies are using Rust in production code. Microsoft and Google have shown serious interest and researched the language for use in security critical components.

3. Linear typesystem, ownership, borrowing and lifetimes. (take image from thesis)
------------------

The main property that differentiates Rust from languages like C and C++ is its typesystem. This system is known as a linear typesystem. The book 'Advanced topics in Types and Programming Languages' by Benjamin Pierce defines a linear typesystem as follows:

"Linear type systems ensure that every variable is used exactly once by allowing exchange but not weakening or contraction."

The key words here are 'used exactly once'. In this context this means that data in a certain memory region representing an object can be associated with one name only. To clarify this further I will explain this in terms of a c++ string object. In c++ a string is represented by two structures. First a structure that is associated with the string variable name. This structure contains a pointer to the second structure, a length and a capacity. The length is the number of characters in the string data, and the capacity is the maximum number of characters that can be held in the string data. The pointer points to the actual characters that make up the string and are stored in the heap.

In c++ you can make a shallow copy, meaning that you create a copy of the first struct and associate that with a different name. The pointer to the heap data is identical to the first string object. The advantage of that is that you do not need to copy a potentially large amount of heap data. The drawback is that the administration in both variables need to be kept in sync. In a linear typesystem, this is considered double use and thus prohibited. When a new variable is associated with the data, the initial struct is marked 'invalid'. Any attempt to access the data via the first variable will result in a compile time error. This concept is called 'Ownership' and can be compared to a person owning a physical object like a book.

To summarize: at any given time, a value must have an owner and can have only one owner. When the owner is destroyed, the value is also destroyed.

In Rust it is possible to associate a second variable name to the string by means of a reference. The reference contains then a pointer to the first variable, which in turn points to the actual string data. This referencing mechanism is called 'Borrowing' and can be compared to a person lending a book to a friend. The friend may read the book, as long as the book is returned to the owner in due time. By default, a reference is immutable. Any attempt to modify the value through a reference will lead to a compile time error. A refence can explicitly be made mutable, but then there can only be a single reference.

To summarize: at any given time there may be many immutable references to a value or a single mutable reference. A reference must always be valid.

Let's view this in a piece of Rust code.

In the first example we pass a string value to a function that will uppercase it internally. The function takes the string by value and therefore the ownership of the string is transferred to the function (or rather the variable name in the argument). 

fn uppercase(input: String) {
    input.to_uppercase();
}

fn main() {
    let output = String::from("hello world.");
    uppercase(output);
}

Any attempt to refer to the string after calling the function will result in a compilation error:

fn uppercase(input: String) {
    input.to_uppercase();
}

fn main() {
    let output = String::from("hello world.");
    uppercase(output);
    //print!("{}", output);
}

The output from the compiler is:

micha@linux-gvwr:~/asml-tour-of-rust/ownership (main)> cargo run
   Compiling ownership v0.1.0 (/home/micha/asml-tour-of-rust/ownership)
error[E0382]: borrow of moved value: `output`
 --> src/main.rs:8:18
  |
6 |     let output = String::from("hello world.");
  |         ------ move occurs because `output` has type `std::string::String`, which does not implement the `Copy` trait
7 |     uppercase(output);
  |               ------ value moved here
8 |     print!("{}", output);
  |                  ^^^^^^ value borrowed here after move

error: aborting due to previous error

For more information about this error, try `rustc --explain E0382`.
error: could not compile `ownership`.

To learn more, run the command again with --verbose.

When we pass the same string by reference, the ownership is not transferred but the function is able to borrow the string. The main function can still use the string after the function returns:

fn uppercase(input: &String) {
    input.to_uppercase();
}

fn main() {
    let output = String::from("hello world.");
    uppercase(&output);
    print!("{}", output);
}

A nice consequence of using linear types is that there is no need for a garbage collector. The compiler can deduce which variable a value belongs to and what the scope of that variable is. In Rust this scope is called the Lifetime of a variable. The absence of a garbage collector lets Rust enter the domain of languages like c and c++ and this is why it is often touted as a system programming language. In the event that you really do need a copy of a value, you can create one by calling the 'clone()' method on a type. This creates a deep copy of the value.

4. Enums
------------------

----- ERDEM ----------

5. Error Handling (Don't panic!)
------------------

Rust divides error handling in two categories: non-recoverable and recoverable. A non-recoverable error is an condition in the program that should never happen and is cause for the program to end prematurely. An example of that would be a division by zero as that leads to an undefined result. In Rust such an error is called a 'panic'. In the event of a panic, the program halts and a default handler is called. Rust will start unwinding the stack and print out a stacktrace for further analysis. One thing to note is that a panic will stay within the boundaries of a thread. So if one thread panics, it does not mean that your whole program will crash. Instead, the thread will abort and the parent thread will be able to retrieve a thread result. In this case the result will be an error. This makes for more robust programs and allows the program to continue the other threads.

An example of a panic situation happens for instance when we explicitly call the panic macro:
fn do_something() {
    panic!("Oh noes!");
}

fn main() {
    do_something();
}

micha@linux-gvwr:~/asml-tour-of-rust/panic (main)> cargo run
   Compiling panic v0.1.0 (/home/micha/asml-tour-of-rust/panic)
    Finished dev [unoptimized + debuginfo] target(s) in 0.23s
     Running `target/debug/panic`
thread 'main' panicked at 'Oh noes!', src/main.rs:2:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

When the program us run with the RUST_BACKTRACE variable set, we will see a full backtrace, including the panic handler itself. In a lot of cases, the output from the less verbose panic is clear enough to deduce what caused the program to terminate. And when the panic macro is used, the programmer often provides an explicit error message to be printed out.

Let's move on to recoverable errors. The Rust language does not have an exception mechanism. Instead it relies on return values. The advantage of using these values is that the caller must do something with them. It is not possible to ignore the error by accident.

Rust has two enum types to denote error conditions:

enum Result<T,E> {
	Ok(T),
	Err(E),
}

The Result enum contains either the value of Ok, which can contain a result type, which should be the result of the function. It also contains a type for the Error case, which is used to attach information about the error. Let's look at an example of its use:

use std::fs::File;

fn main() {
    let f = File::open("hello.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => panic!("Problem opening the file: {:?}", error),
    };
}

Here we use a so called match operator to distinguish between the good case and the error case. In the event of an error we turn it into a panic and print out the error. Here is the output in the event of a missing file:

thread 'main' panicked at 'Problem opening the file: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main.rs:8:23
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

As we can see here the error has a kind and a message to convey additional information about what happened. The match statement above is still a bit verbose, so it is possible to write a shorthand for that using the available methods in the Result type:

let x = get_weather("Veldhoven").or(Ok(default));

In this case we get a weather report for Veldhoven if all goes well, or we get a result containing a default report in case of a failure. The result type contains more functions to tweak the error case, such as returning a value instead of a result, calling a function in the event of an error to produce a default and producing a mutable value. Have look at the reference documentation if you are interested in this topic.

An alternative to the Result type is the option type. This is used when it is ok when there might not be a value to return. Instead of returning a NULL which could go unchecked by the caller, the Option type must be handled. This forces the caller to expect this case as well.

enum Option<T> {
	Some(T),
	None
}

6. Polymorphism
------------------

Polymorphism in Rust is enabled by the use of Traits, which are similar to Interfaces in Java or Abstract classed in C++. Rust does not have classes or inheritance, but you can create structs and add methods to them by implementing a trait which declares the methods. An example of a trait and implementation would be creating a number of animals:

trait Sound {
	fn make_noise(&Self)-> String;
}

A dog and cat could then implement this trait as follows:

struct Dog { name: String };

impl Sound for Dog {
	fn make_noise(&Self) -> String {
		return String::from("Woof!");
	}
}

struct Cat { name: String };

impl Sound for Cat {
	fn make_noise(&Self) -> String {
		return String::from("Meow!");
	}
}

Here we define the trait Sound, which can be implemented to give a dog or a cat the ability to make a sound. Traits resemble abilities and represent something that a type can do. In Rust you must have a trait in your scope in order to implement its methods. The reason for this is that it could lead to naming conflicts otherwise. We will see later how a trait can be brought into scope in the section on modules. A nice feature of this system is that it allows you to even extend build in types like an int 32 with your own traits.

Trait objects

Because Rust does not have classes or inheritance, you cannot create base classes. Suppose I want to create a framework for gui elements. Each element should be able to draw itself, so we define a Draw trait that must be implemented by the elements:

trait Draw {
	fn draw(&self);
}

If we want to make a canvas with a vector of different elements we cannot do this:

struct Canvas {
	canvas: Vec<Draw>,
}

The reason is that Rust wants to know the size of the elements at compile time and some elements might not even be known by then, for instance if we offer this as a library that may be extended by others. The way Rust solves this is by means of a trait object. A trait object is an object that contains at least two pointers: one pointing to the concrete type implementing the trait and one to the vtable that contains pointers to implementations of the trait.
This is denoted in Rust as follows:

struct Canvas {
	canvas: Vec<Box<dyn Draw>>,
}

Here we use a Box, which is a smart pointer which will be converted to a trait object. The dyn keyword tells Rust that we are talking about a trait instead of a struct type. In this way we can store many types of elements in the canvas. And trait objects allow us to extend an existing type with multiple vtables, i.e. implement multiple traits.

Generic functions

One other way to achieve polymorphism is the use of generic functions. Generic functions are similar to using templates in C++. Suppose we want to define a min function, which returns the smallest of two values. We could implement it like so:

fn min(value1: u32, value2: u32) -> u32 {
	if value1 <= value2 {
		value1
	} else {
		value2
	}
}

This of course only works for u32 types, so we want to make it more generic:

fn min<T>(value1: T, value2: T) -> T {
	if value1 <= value2 {
		value1
	} else {
		value2
	}
}

The capital T denotes any type with which this function will be called. Like templates, Rust will generate the machine code compile time for each type. There is still one problem with this implementation however. Not all types can be compared. So we need to add some sort of restriction on the type that can be used. Such a restriction is called a bound in Rust and can be added like so:

fn min<T: Ord>(value1: T, value2: T) -> T {
	if value1 <= value2 {
		value1
	} else {
		value2
	}
}

Now only the right types can be used with this function. It is possible to add more generic types and it is also possible to add more bounds to a type. We will not be diving deeper into this topic for now.

It can be tricky to decide when to use trait objects and when to use generics. Generics may cause code bloat, because there will be code generated for each type the function is called with. And the generated code may be inlined. The upshot however is that there is practically no runtime overhead. This is in contrast with trait objects, which do have some indirection overhead at runtime, but will produce no code bloat.

7. Concurrency
------------------
